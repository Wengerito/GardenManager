@model GardenManager.Models.t_plante
@Scripts.Render("~/bundles/jquery")
<script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
@{
    ViewBag.Title = "Create";
}

<h2>Nouvelle plante</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            <label class="control-label col-md-2">Nom</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.plaName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.plaName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Type</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.plaType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.plaType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Protocole</label>
            <div class="col-md-10">
                <input class="form-control" id="tmpProtocole" type="text" readonly="readonly" />
            </div>
            <div id="protList">
            </div>
        </div>
        @Html.HiddenFor(model => model.plaProtocol, new { id = "plaProtocol" })
        @Html.ValidationMessageFor(model => model.plaProtocol, "", new { @class = "text-danger" })

        <div style="display:inline-flex">
            <div id="tasksContainer">
            </div>
            <div>
                <select id="slctMode">
                    <option value="tou(te)s les">tou(te)s les</option>
                    <option value="après">après</option>
                    <option value="en">en</option>
                </select>
            </div>
            <div>
                <select id="slctNbr">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
            </div>
            <div>
                <select id="slctTimeUnit">
                    <option value="jours">jours</option>
                    <option value="semaines">semaine</option>
                    <option value="mois">mois</option>
                </select>
            </div>
            <div>
                <select id="slctMonth" hidden>
                    <option value="janvier">janvier</option>
                    <option value="février">février</option>
                    <option value="mars">mars</option>
                </select>
            </div>
            <input id="btnAdd" type="button" value="+">
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" onclick="createProtocol()" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Retour", "Index")
</div>
<script>
    //Get the tasks list
    $(document).ready(function () {
        // Get the data
        var taskRequest = new XMLHttpRequest();
        taskRequest.open('GET', '../Task/tasksList');
        taskRequest.onload = function () {
            if (taskRequest.status >= 200 && taskRequest.status < 400) {
                var data = JSON.parse(taskRequest.responseText);
                createHTML(data);
            } else {
                console.log("erreur JSON:" + taskRequest.status);
                createHTMLerror();
            }
        };
        taskRequest.onerror = function () {
            console.log("connexion erreur");
        };
        taskRequest.send();

        // Error message
        function createHTMLerror() {
            var tasksContainer = document.getElementById("tasksContainer");
            tasksContainer.innerHTML = "Oupss... try to reload";
        }
        // Generate HTML with the data (dropdownlist)
        function createHTML(tasksData) {
            var rawTemplate = document.getElementById("tasksDropDownTemplate").innerHTML;
            var compiledTemplate = Handlebars.compile(rawTemplate);
            var ourGeneratedHTML = compiledTemplate(tasksData);

            var tasksContainer = document.getElementById("tasksContainer");
            tasksContainer.innerHTML += ourGeneratedHTML;
        }
    });

    //EventListerner to handle first task
    const slctMode = document.getElementById("slctMode");
    slctMode.addEventListener('change', selectMode);

    //Change dropdown lists
    function selectMode() {
        if (slctMode.value=="en") {
            document.getElementById("slctNbr").hidden = true;
            document.getElementById("slctTimeUnit").hidden = true;
            document.getElementById("slctMonth").hidden = false;
        }
        else {
            document.getElementById("slctNbr").hidden = false;
            document.getElementById("slctTimeUnit").hidden = false;
            document.getElementById("slctMonth").hidden = true;
        }
    }

    //EventListener to add tasks to protocol
    const button = document.getElementById("btnAdd");
    button.addEventListener('click', addProt);

    //Add tasks to protocol
    function addProt() {
        var newProt = document.createElement("P");
        var strProt = "";
        strProt += document.getElementById("slctTask").value + " ";
        strProt += document.getElementById("slctMode").value + " ";
        strProt += document.getElementById("slctNbr").value + " ";
        strProt += document.getElementById("slctTimeUnit").value + " ";
        var textNode = document.createTextNode(strProt);
        newProt.appendChild(textNode);
        document.getElementById("protList").appendChild(newProt);
    }

    //Create the protocol string before submitting
    function createProtocol() {
        var data = "1) ";

        document.getElementById("plaProtocol").value = data;
    }

    function refreshProtocol() {
        var data =
            document.getElementById("tmpProtocole").value = data;
    }

    
</script>

@*Template dropdown Handlebar*@
<script id="tasksDropDownTemplate" type="text/x-handlebars-template">

    <select id="slctTask">
        {{#each .}}
        <option value={{tacName}}>{{tacName}}</option>
        {{/each}}
    </select>

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
